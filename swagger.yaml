openapi: '3.0.3'
info:
  title: MEPHI EP API
  description: API created for providing the educational process in the training program "Extreme Programming" at NRNU MEPhI
  version: '1.0.0'
servers:
  - url: http://127.0.0.1:8080/api
components:
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
  schemas:
    ErrorObject:
      type: object
      properties:
        error:
          type: string
      required:
        - error
    IdObject:
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    Group:
      type: object
      properties:
        name:
          type: string
        user_list:
          type: array
          items:
            type: integer
        semester_list:
          type: array
          items:
            type: integer
        cf_group_code:
          type: string
      required:
        - name
    Point:
      type: object
      properties:
        reason:
          type: string
        amount:
          type: integer
        semester_result_id:
          type: integer
      required:
        - reason
        - amount
        - semester_result_id
    Problem:
      type: object
      properties:
        name:
          type: string
        statement:
          type: string
        subject:
          type: integer
        semester_number:
          type: integer
        work_list:
          type: array
          items:
            type: integer
        work_result_list:
          type: array
          items:
            type: integer
      required:
        - name
        - statement
        - subject
        - semester_number
    SemesterResult:
      type: object
      properties:
        semester_id:
          type: integer
        user_id:
          type: integer
        work_result_list:
          type: array
          items:
            type: integer
        point_list:
          type: array
          items:
            type: integer
      required:
        - semester_id
        - user_id
    Semester:
      type: object
      properties:
        semester_number:
          type: integer
        subject:
          type: integer
        start:
          type: integer
        end:
          type: integer
        group_id:
          type: integer
        semester_result_list:
          type: array
          items:
            type: integer
        cf_max_point:
          type: integer
        atc_ratio:
          type: integer
      required:
        - semester_number
        - subject
        - start
        - end
        - group_id
    User:
      type: object
      properties:
        user_type:
          type: integer
        name:
          type: string
        surname:
          type: string
        tg_id:
          type: integer
        tg_username:
          type: string
        group_id:
          type: integer
        semester_result_list:
          type: array
          items:
            type: integer
        cf_name:
          type: string
        atc_name:
          type: string
      required:
        - user_type
        - name
        - surname
        - tg_id
        - tg_username
    WorkResult:
      type: object
      properties:
        work_id:
          type: integer
        mark:
          type: integer
        semester_result_id:
          type: integer
      required:
        - work_id
        - semester_result_id
    Work:
      type: object
      properties:
        name:
          type: string
        start:
          type: integer
        end:
          type: integer
        semester_id:
          type: integer
        is_exam:
          type: integer
        work_result_list:
          type: array
          items:
            type: integer
      required:
        - name
        - start
        - end
        - semester_id
  parameters:
    PathId:
      name: id
      in: path
      required: true
      schema:
        type: integer
  responses:
    Unauthorized:
      description: Authorization error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    Forbidden:
      description: Not enough roots
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    BadRequest:
      description: Sent request was created with errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    UnprocessableEntity:
      description: Some properties which are wanted to be changed by request are alredy used by other objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    ServerError:
      description: Error on the server's side
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
paths:
  /user:
    get:
      summary: Returns a list of all User's id.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tg_id:
                  type: integer
                tg_username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
              required:
                - tg_id
                - tg_username
                - name
                - surname
      responses:
        '201':
          description: Created User's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{id}:
    parameters:
      - $ref: '#/components/parameters/PathId'
    patch:
      summary: Changes User's properties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_type:
                  type: integer
                name:
                  type: string
                surname:
                  type: string
                tg_username:
                  type: string
                group_id:
                  type: integer
                cf_name:
                  type: string
                atc_name:
                  type: string
      responses:
        '200':
          description: Changed User's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Returns User's properties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes User
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Deleted User's properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{id}/auth:
    parameters:
      - $ref: '#/components/parameters/PathId'
    post:
      summary: Provides authorization
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                first_name:
                  type: string
                last_name:
                  type: string
                username:
                  type: string
                photo_url:
                  type: string
                auth_date:
                  type: integer
                hash:
                  type: string
              required:
                - id
                - first_name
                - last_name
                - username
                - photo_url
                - auth_date
                - hash
      responses:
        '200':
          description: Authorization token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - properties
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /group:
    get:
      summary: Returns a list of all Group's id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates Group
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '201':
          description: Created Group's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Group'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /group/{id}:
    parameters:
      - $ref: '#/components/parameters/PathId'
    get:
      summary: Get Group's properties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Group's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Group'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Changes Group's properties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                cf_group_code:
                  type: string
      responses:
        '200':
          description: Changed Group's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Group'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes Group
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Deleted Group's properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /point:
    get:
      summary: Returns a list of all Point's id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates Point
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                amount:
                  type: integer
                semester_result_id:
                  type: integer
              required:
                - reason
                - amount
                - semester_result_id
      responses:
        '201':
          description: Created Point's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Point'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /point/{id}:
    parameters:
      - $ref: '#/components/parameters/PathId'
    get:
      summary: Returns Point's properties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Point's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Point'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes Point
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Deleted Point's properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Point'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Changes Point's properties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                amount:
                  type: integer
                semester_result_id:
                  type: integer
      responses:
        '200':
          description: Changed Point's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Point'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /problem:
    get:
      summary: Returns a list of all Problem's id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates Problem
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                statement:
                  type: string
                subject:
                  type: integer
                semester_number:
                  type: integer
              required:
                - name
                - statement
                - subject
                - semester_number
      responses:
        '201':
          description: Created Problem's properties
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /problem/{id}:
    parameters:
      - $ref: '#/components/parameters/PathId'
    get:
      summary: Returns Problem's properties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Problem's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Problem'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes Problem
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Deleted Problem's properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Changes Problem's properties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                statement:
                  type: string
                subject:
                  type: integer
                semester_number:
                  type: integer
      responses:
        '200':
          description: Changed Problem's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Problem'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /semester_result:
    get:
      summary: Returns a list of all SemesterResult's id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates SemesterResult
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                semester_id:
                  type: integer
                user_id:
                  type: integer
              required:
                - semester_id
                - user_id
      responses:
        '201':
          description: Created SemesterResult's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SemesterResult'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /semester_result/{id}:
    parameters:
      - $ref: '#/components/parameters/PathId'
    get:
      summary: Returns SemesterResult's properties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: SemesterResult's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SemesterResult'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes SemesterResult
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Deleted SemesterResult's properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemesterResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Changes SemesterResult's properties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                semester_id:
                  type: integer
                user_id:
                  type: integer
      responses:
        '200':
          description: Changed SemesterResult's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SemesterResult'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /semester:
    get:
      summary: Returns a list of all Semester's id
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates Semester
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                semester_number:
                  type: integer
                subject:
                  type: integer
                start:
                  type: integer
                end:
                  type: integer
              required:
                - semester_number
                - subject
                - start
                - end
      responses:
        '201':
          description: Created Semester's properties
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Semester'
                  - $ref: '#/components/schemas/IdObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
  /semester/{id}:
    parameters:
      - $ref: '#/components/parameters/PathId'
    get:
      summary: Returns Semester's properties
      security:
        - BearerAuth: []
        
      

      